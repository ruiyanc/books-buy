<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yanrui.api.dao.CommentMapper">
  <resultMap id="BaseResultMap" type="com.yanrui.api.pojo.Comment">
    <constructor>
      <idArg column="comment_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="uid" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="product_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="comment_info" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="score" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    comment_id as commentId,uid,product_id as productId,
    comment_info as commentInfo,score,create_time as createTime,update_time as updateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yanrui.api.pojo.Comment">
    insert into comment (comment_id, uid, product_id,
      comment_info, score, create_time, update_time)
    values (#{commentId,jdbcType=INTEGER}, #{uid,jdbcType=VARCHAR}, #{productId,jdbcType=INTEGER},
      #{commentInfo,jdbcType=VARCHAR}, #{score,jdbcType=INTEGER} , #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.yanrui.api.pojo.Comment">
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="commentInfo != null">
        comment_info,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="commentInfo != null">
        #{commentInfo,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yanrui.api.pojo.Comment">
    update comment
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="commentInfo != null">
        comment_info = #{commentInfo,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yanrui.api.pojo.Comment">
    update comment
    set uid = #{uid,jdbcType=VARCHAR},
      product_id = #{productId,jdbcType=INTEGER},
      comment_info = #{commentInfo,jdbcType=VARCHAR},
      score = #{score,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <select id="findCommentAndUserByProductId" parameterType="integer" resultType="map">
    select comment_id as commentId, comment.uid as uid, username, product_id as productId,
           comment_info as commentInfo, score, comment.create_time as createTime, comment.update_time as updateTime
    from comment, user
    where comment.uid=user.uid
    and product_id=#{productId,jdbcType=INTEGER}
  </select>
  <select id="findAvgCommentsByProductId" resultType="double">
    select avg(score) as rate
    from comment
    where product_id=#{productId,jdbcType=INTEGER}
  </select>
  <select id="findCommentsByProductId" resultType="int">
    select count(*) as comments
    from comment
    where product_id=#{productId,jdbcType=INTEGER}
  </select>
</mapper>