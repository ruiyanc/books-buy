<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yanrui.api.dao.CollectMapper">
  <resultMap id="BaseResultMap" type="com.yanrui.api.pojo.Collect">
    <constructor>
      <idArg column="collect_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="uid" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="product_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    collect_id as collectId,uid,product_id as productId,
    create_time as createTime,update_time as updateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from collect
    where collect_id = #{collectId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from collect
    where collect_id = #{collectId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yanrui.api.pojo.Collect">
    insert into collect (collect_id, uid, product_id,
       create_time, update_time)
    values (#{collectId,jdbcType=INTEGER}, #{uid,jdbcType=VARCHAR}, #{productId,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.yanrui.api.pojo.Collect">
    insert into collect
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="collectId != null">
        collect_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="collectId != null">
        #{collectId,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yanrui.api.pojo.Collect">
    update collect
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where collect_id = #{collectId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yanrui.api.pojo.Collect">
    update collect
    set uid = #{uid,jdbcType=VARCHAR},
      product_id = #{productId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where collect_id = #{collectId,jdbcType=INTEGER}
  </update>
  <select id="findCountsByProductId" resultType="int" parameterType="integer">
    select count(*) as collectCounts
    from collect
    where product_id=#{productId,jdbcType=INTEGER}
  </select>
    <delete id="deleteByUidAndProductId" parameterType="map">
        delete from collect
        where uid=#{param1,jdbcType=VARCHAR}
        and product_id=#{param2,jdbcType=INTEGER}
    </delete>
    <select id="selectByUidAndProductId" parameterType="map" resultType="com.yanrui.api.pojo.Collect">
        select <include refid="Base_Column_List"/>
        from collect
        where product_id=#{param1,jdbcType=INTEGER}
        and uid=#{param2,jdbcType=VARCHAR}
    </select>
  <select id="findAllCollectByUid" parameterType="string" resultType="map">
    select collect_id as collectId,product_id as productId,collect.create_time as createTime,collect.update_time as updateTime,
      category_id as categoryId,category.name as categoryName,product.name as productName,author,subtitle,image,detail,
      original_price as originalPrice,discount_price as discountPrice
    from collect,product,category
    where collect.product_id=product.id
      and product.category_id=category.id
    and uid=#{uid,jdbcType=VARCHAR}
  </select>

</mapper>